// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model DiscourseUser {
  id Int @id @default(autoincrement())
  externalId Int @unique
  username String
  avatarTemplate String
  topics DiscourseTopic[]
  posts DiscoursePost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscourseTag {
  id Int @id @default(autoincrement())
  externalId String @unique
  text String
  description String?
  count Int? // optional so that tag can be created from topic webhook payload
  topics DiscourseTopicTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscourseTopicTag {
  tagId Int
  topicId Int
  tag DiscourseTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  topic DiscourseTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([tagId, topicId])
}

model DiscourseCategory {
  id Int @id @default(autoincrement())
  externalId Int @unique
  parentCategoryId Int?
  name String
  color String
  slug String
  topicCount Int
  descriptionText String?
  hasChildren Boolean
  uploadedLogo String?
  uploadedLogoDark String?
  topics DiscourseTopic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscourseTopic {
  id Int @id @default(autoincrement())
  externalId Int @unique
  userId Int
  categoryId Int? 
  title String
  fancyTitle String
  postsCount Int
  externalCreatedAt DateTime
  likeCount Int
  lastPostedAt DateTime
  visible Boolean
  closed Boolean
  archetype String
  slug String
  wordCount Int
  tags DiscourseTopicTag[]
  user DiscourseUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  category DiscourseCategory? @relation(fields: [categoryId], references: [id])
  post DiscoursePost?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscoursePost {
  id Int @id @default(autoincrement())
  externalId Int @unique
  username String
  avatarTemplate String
  externalCreatedAt DateTime
  cooked String
  postNumber Int
  postType Int
  externalUpdatedAt DateTime
  replyCount Int
  replyToPostNumber Int?
  topicId Int @unique
  raw String? // in the webhook payload and posts/id.json API data, but not topicList posts data, maybe remove later
  userId Int
  topic DiscourseTopic? @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user DiscourseUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
